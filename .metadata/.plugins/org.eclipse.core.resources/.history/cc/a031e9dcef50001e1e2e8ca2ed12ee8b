import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
    	Scanner scanner = new Scanner(System.in);

        System.out.println("Criação do Personagem");
        System.out.print("Nome do Personagem: ");
        String playerName = scanner.nextLine();

        System.out.print("Força: ");
        int strength = scanner.nextInt();

        System.out.print("Constituição: ");
        int constitution = scanner.nextInt();

        System.out.print("Agilidade: ");
        int agility = scanner.nextInt();

        System.out.print("Destreza: ");
        int dexterity = scanner.nextInt();

        scanner.nextLine();

        System.out.println("Escolha uma arma: ");
        System.out.println("1. Espada Leve");
        System.out.println("2. Espada Pesada");
        System.out.println("3. Arco");
        System.out.println("4. Crossbow");
        int weaponChoice = scanner.nextInt();
        Weapon weapon = createWeapon(weaponChoice);

        scanner.nextLine();
        
        System.out.println("Escolha uma armadura: ");
        System.out.println("1. Armadura Leve");
        System.out.println("2. Armadura Pesada");
        int armorChoice = scanner.nextInt();
        Armor armor = createArmor(armorChoice);

        scanner.close();

        Character player = new Character(playerName, strength, constitution, agility, dexterity, weapon, armor);


        Character enemy = new Character("Enemy", 10, 15, 8, 10, new Weapon(Weapon.SWORD_HEAVY, 12), new Armor(8));

        while (player.isAlive() && enemy.isAlive()) {
            int playerDamage = player.calculateDamage();
            int enemyDamage = enemy.calculateDamage();

            System.out.println(player.getName() + " attacks " + enemy.getName() + " for " + playerDamage + " damage.");
            enemy.receiveDamage(playerDamage);

            System.out.println(enemy.getName() + " attacks " + player.getName() + " for " + enemyDamage + " damage.");
            player.receiveDamage(enemyDamage);

            System.out.println(player.getName() + " HP: " + player.getHitPoints());
            System.out.println(enemy.getName() + " HP: " + enemy.getHitPoints());
            System.out.println("------");
        }

        if (player.isAlive()) {
            System.out.println(player.getName() + " wins!");
        } else if (enemy.isAlive()) {
            System.out.println(enemy.getName() + " wins!");
        } else {
            System.out.println("It's a draw!");
        }
    }
    
private static Weapon createWeapon(int choice) {
    switch (choice) {
        case 1:
            return new Weapon(Weapon.SWORD_LIGHT, 10);
        case 2:
            return new Weapon(Weapon.SWORD_HEAVY, 12);
        case 3:
            return new Weapon(Weapon.BOW, 10);
        case 4:
            return new Weapon(Weapon.CROSSBOW, 12);
        default:
            throw new IllegalArgumentException("Escolha de arma inválida.");
    }
}

private static Armor createArmor(int choice) {
    switch (choice) {
        case 1:
            return new Armor(5);
        case 2:
            return new Armor(8);
        default:
            throw new IllegalArgumentException("Escolha de armadura inválida.");
    }
}
}
